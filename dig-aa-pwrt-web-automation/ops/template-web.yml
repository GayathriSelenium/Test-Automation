AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Permissions Admin Web Application

Outputs:
  CognitoAppId:
    Value: !Ref CognitoAppClient
    Export:
      Name: !Sub "${AWS::StackName}-CognitoAppId"
  DomainName:
    Description: "Application Url"
    Value: !Sub "https://${DomainRecord}/"
  StaticFileBucket:
    Description: "Static Application files Bucket ARN"
    Value: !Sub "${BucketApp.Arn}"

Parameters:
  Environment:
    Type: String
    Default: "igbuild"
    Description: localname for environment/account
  Namespace:
    Type: String
    Default: "digital-pwrt"
    Description: Prefix for asset names
  EdgeAuthARN:
    Type: String
    Default: "arn:aws:lambda:us-east-1:930928620228:function:ServerlessAuthEdge"
    Description: Cross account cf exports is not a thing so we do this.
  EdgeAuthVersion:
    Type: String
    Default: "90"
    Description: Need to specify the lambda edge version
  DomainRoot:
    Type: String
    Default: "build.ig.orgn.io"
    Description: Domain to build assets from
  DomainBase:
    Type: String
    Default: "pwrt"
    Description: Domain to build assets from
  CertificateArn:
    Type: String
    Default: "arn:aws:acm:us-east-1:930928620228:certificate/1ef28d0e-eeef-4b4d-8105-0d03f09c1dd8"
    Description: Domain SSL certificate Arn
  CognitoId:
    Type: String
    Default: "hjyuB2tyf"
    Description: Id of the cognito user pool to utilise for authentication
  StackOriginCloudFormation:
    Type: String
    Default: "OriginCloudFormation"
    Description: Name of the cloudformation stack that provides all custom resources

Resources:
  # -------------------------------------------------------------------
  # S3 Web Application file store
  # -------------------------------------------------------------------

  BucketApp:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-${Namespace}-application"
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "http*"
            AllowedMethods:
              - GET
            AllowedHeaders:
              - "*"
            ExposedHeaders:
              - Etag
              - x-amz-meta-custom-header

  BucketAppPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref BucketApp
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub "arn:aws:s3:::${BucketApp}/*"

  # -------------------------------------------------------------------
  # Cloudfront Web App
  # -------------------------------------------------------------------

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFrontOAI

  DistributionApp:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: "true"
        Comment: "Post Workover Recovery Tool App"
        DefaultRootObject: "index.html"
        Aliases:
          - !Sub "${DomainBase}.${DomainRoot}"
        ViewerCertificate:
          # *.build.ig.orgn.io certificate
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
        Origins:
          - Id: BucketApp
            DomainName: !GetAtt BucketApp.DomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentity}"
        DefaultCacheBehavior:
          TargetOriginId: BucketApp
          MaxTTL: 0
          MinTTL: 0
          DefaultTTL: 0
          ForwardedValues:
            QueryString: "false"
            Headers:
              - Origin
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: viewer-request
              # Cant ImportValue cross-region so hardcoded for now.
              LambdaFunctionARN: !Sub "${EdgeAuthARN}:${EdgeAuthVersion}"
        CustomErrorResponses:
          - ErrorCachingMinTTL: 0
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
    DependsOn:
      - BucketApp
      - OriginAccessIdentity

  # -------------------------------------------------------------------
  # DNS Entry
  # -------------------------------------------------------------------

  DomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DomainRoot}."
      Comment: Digital PWRT Web Application Cloudfront Distribution
      Name: !Sub "${DomainBase}.${DomainRoot}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt DistributionApp.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: !Sub "Z2FDTNDATAQYW2" # this is the cloudfront hosted zone

  # -------------------------------------------------------------------
  # Cognito App Client
  # -------------------------------------------------------------------

  CognitoAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Sub "${AWS::Region}_${CognitoId}"
      ClientName: !Sub "Digital - Post Workover Recovery Tool"
      GenerateSecret: false # @TODO dont use a secret for the frontend stuff, create 2 clients perhaps, one for server to server and one for web to server
      RefreshTokenValidity: 30
      #ExplicitAuthFlows:
      #  - USER_PASSWORD_AUTH

  # https://github.com/rosberglinhares/CloudFormationCognitoCustomResources
  CognitoAppClientSettings:
    Type: "Custom::CognitoUserPoolClientSettings"
    Properties:
      ServiceToken:
        Fn::ImportValue: !Sub "${StackOriginCloudFormation}-CognitoUserPoolClientSettings-Arn"
      UserPoolId: !Sub "${AWS::Region}_${CognitoId}"
      UserPoolClientId: !Ref CognitoAppClient
      SupportedIdentityProviders:
        - OriginAzureAD
      CallbackURLs:
        - http://localhost:3000/oauth2/callback
        - https://www.getpostman.com/oauth2/callback
        - !Sub "https://${DomainRecord}/oauth2/idpresponse"
      LogoutURLs:
        - !Sub "https://${DomainRecord}/oauth2/logout"
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
